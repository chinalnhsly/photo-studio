generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  phone     String?
  orders        Order[]
  appointments  Appointment[]
  reviews       Review[]
  memberPoints  MembershipPoints?
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@index([name])
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  categoryId  Int
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  stock       Int      @default(0)
  category    Category @relation(fields: [categoryId], references: [id])
  orderItems    OrderItem[]
  reviews       Review[]

  @@index([categoryId])
  @@index([isActive])
}

model Order {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  totalAmount Decimal  @db.Decimal(10, 2)
  status      OrderStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orderItems  OrderItem[]
  payment     Payment?

  @@index([userId])
  @@index([status])
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)

  @@index([orderId])
  @@index([productId])
}

model Appointment {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  serviceId   Int
  service     Service   @relation(fields: [serviceId], references: [id])
  date        DateTime
  status      AppointmentStatus @default(PENDING)
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
  @@index([serviceId])
  @@index([date])
}

model Service {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  price       Decimal       @db.Decimal(10, 2)
  duration    Int          // 服务时长（分钟）
  isActive    Boolean      @default(true)
  appointments Appointment[]
  reviews      Review[]    // 添加这一行，建立与 Review 的关联
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Review {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  productId   Int?
  product     Product? @relation(fields: [productId], references: [id])
  serviceId   Int?
  service     Service? @relation(fields: [serviceId], references: [id])
  rating      Int      @db.SmallInt
  comment     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([productId])
  @@index([serviceId])
}

model Portfolio {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  imageUrl    String
  category    String
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category])
}

model MembershipPoints {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  user        User     @relation(fields: [userId], references: [id])
  points      Int      @default(0)
  level       Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Payment {
  id          Int      @id @default(autoincrement())
  orderId     Int      @unique
  order       Order    @relation(fields: [orderId], references: [id])
  amount      Decimal  @db.Decimal(10, 2)
  status      PaymentStatus @default(PENDING)
  method      PaymentMethod
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([status])
}

enum Role {
  USER
  ADMIN
  STAFF
}

enum OrderStatus {
  PENDING
  PAID
  PROCESSING
  COMPLETED
  CANCELLED
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  WECHAT
  ALIPAY
}
